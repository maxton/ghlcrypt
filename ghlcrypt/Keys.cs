using System.Security.Cryptography;
using System.IO;
using System;
using System.Text;
using System.Collections.Generic;

namespace GHLCrypt
{
  public static class Keys
  {
    public static byte[] mask = new byte[]
    {
      0x59, 0xb0, 0x67, 0x14, 0x93, 0xc2, 0x04, 0xdc,
      0x05, 0xa5, 0xf0, 0xfe, 0xdb, 0x4a, 0xb4, 0xbe
    };

    public static Dictionary<string, byte[]> keys = new Dictionary<string, byte[]>
    {
      {
        "GHL0",
        new byte[] { 0x2E, 0xF3, 0x18, 0x76, 0xFE, 0x4D, 0xD6, 0x3E, 0x61, 0xBD, 0x57, 0xF2, 0xC5, 0x01, 0x66, 0xEA }
      },
      {
        "GHL1",
        new byte[] { 0x79, 0x0E, 0x96, 0x00, 0xFE, 0xE3, 0x90, 0x80, 0x3C, 0x30, 0xC7, 0x3A, 0x52, 0x73, 0xEE, 0x8F }
      },
      {
        "GHL2",
        new byte[] { 0xD3, 0x49, 0x19, 0x4D, 0x75, 0x5B, 0x9F, 0x63, 0x88, 0xE6, 0x58, 0x3D, 0xDD, 0x8B, 0x30, 0xF2 }
      },
      {
        "GHL3",
        new byte[] { 0xBC, 0xA8, 0xBB, 0x38, 0x84, 0x75, 0x18, 0xE7, 0x65, 0xC5, 0x3C, 0x94, 0x50, 0xD6, 0xF7, 0x40 }
      },
      {
        "GHL4",
        new byte[] { 0x26, 0x1A, 0x8C, 0x34, 0xC3, 0x52, 0x06, 0x01, 0x88, 0xD5, 0x0C, 0xD2, 0xF0, 0x18, 0xD8, 0x96 }
      },
      {
        "GHL5",
        new byte[] { 0x3E, 0xDB, 0xE2, 0x00, 0x86, 0x4E, 0x38, 0x8F, 0xBA, 0xE5, 0x1F, 0x91, 0xDB, 0x0A, 0x6C, 0x33 }
      },
      {
        "GHL6",
        new byte[] { 0xB0, 0x7A, 0x8A, 0x85, 0x6F, 0xBA, 0x98, 0x21, 0x8F, 0x14, 0xF1, 0x59, 0xB8, 0x79, 0xF1, 0xB3 }
      },
      {
        "GHL7",
        new byte[] { 0xF0, 0x57, 0x1D, 0x47, 0xC5, 0x3F, 0xD8, 0xAF, 0x37, 0xC7, 0x64, 0x28, 0xA8, 0x75, 0x75, 0xA5 }
      },
      {
        "GHL8",
        new byte[] { 0x22, 0xF3, 0x27, 0x50, 0xC0, 0xE7, 0x8A, 0xC8, 0x87, 0x91, 0xBB, 0x17, 0x93, 0xDA, 0x04, 0x85 }
      },
      {
        "GHL9",
        new byte[] { 0x9C, 0xC4, 0x19, 0x63, 0xAA, 0x8E, 0x9F, 0x5C, 0x5B, 0x1B, 0xCE, 0x57, 0x31, 0x19, 0x75, 0x6E }
      },
      {
        "t0",
        new byte[] { 0x1e, 0x8f, 0x4d, 0xcc, 0x59, 0xf9, 0xb8, 0x2b, 0xa8, 0xd4, 0xad, 0x19, 0x4b, 0xdc, 0x9a, 0x40 }
      },
      {
        "config",
        new byte[] { 0x9d, 0x2d, 0x0c, 0xfb, 0xf2, 0xe4, 0x75, 0x43, 0x05, 0x4b, 0xd1, 0x6c, 0xad, 0xe6, 0xb6, 0xec }
      },
    };

    public static Dictionary<string, byte[]> ivs = new Dictionary<string, byte[]>
    {
      {
        "GHL0",
        new byte[] { 0x0D, 0x20, 0x76, 0x3A, 0x50, 0x77, 0xEF, 0x28, 0x9B, 0x8E, 0xB9, 0xEE, 0x5D, 0x3F, 0xDB, 0x51 }
      },
      {
        "GHL1",
        new byte[] { 0xEA, 0x16, 0x2F, 0x5F, 0x0A, 0x9A, 0xAA, 0xFC, 0x6C, 0x03, 0xC9, 0x3C, 0x0B, 0x78, 0x3D, 0xCE }
      },
      {
        "GHL2",
        new byte[] { 0xFE, 0x21, 0x24, 0x7D, 0x4C, 0x46, 0x0F, 0x57, 0xFC, 0x05, 0x3E, 0xA6, 0xBB, 0x3E, 0xBB, 0x81 }
      },
      {
        "GHL3",
        new byte[] { 0x38, 0xC0, 0x4E, 0x20, 0x35, 0x37, 0x3F, 0x1E, 0x87, 0x7F, 0xCC, 0xE2, 0x12, 0x58, 0xEC, 0xE5 }
      },
      {
        "GHL4",
        new byte[] { 0x5F, 0x29, 0x59, 0x71, 0x65, 0x7A, 0x71, 0x20, 0xCA, 0x4D, 0xA7, 0x4C, 0x7C, 0xCE, 0x74, 0xDC }
      },
      {
        "GHL5",
        new byte[] { 0x29, 0x7D, 0x91, 0x92, 0xC5, 0xAE, 0xCB, 0x86, 0xF5, 0x94, 0x70, 0x7F, 0x8B, 0x72, 0xDE, 0x9F }
      },
      {
        "GHL6",
        new byte[] { 0xA2, 0xDB, 0xC9, 0x26, 0x33, 0xF5, 0x4A, 0x2D, 0x55, 0x15, 0x13, 0x8F, 0xEF, 0x7D, 0x99, 0x5B }
      },
      {
        "GHL7",
        new byte[] { 0xA8, 0x75, 0x58, 0x06, 0xC5, 0x4A, 0x2E, 0x82, 0x7B, 0x4D, 0xAF, 0x78, 0xE2, 0xE6, 0x74, 0x43 }
      },
      {
        "GHL8",
        new byte[] { 0x15, 0xE5, 0x41, 0xFC, 0x43, 0xC9, 0x1D, 0x51, 0xC0, 0x41, 0xB2, 0xBA, 0x84, 0xD8, 0xAD, 0x66 }
      },
      {
        "GHL9",
        new byte[] { 0x17, 0x3B, 0x16, 0xAB, 0x15, 0x7A, 0x83, 0xE4, 0xC0, 0x19, 0x13, 0x56, 0xCA, 0xB0, 0x7E, 0xCD }
      },
      {
        "t0",
        new byte[] { 0xb9, 0x1c, 0x35, 0x88, 0x88, 0x55, 0x3f, 0xfb, 0x60, 0x2c, 0x88, 0xb8, 0xeb, 0xc8, 0xec, 0x80 }
      },
      {
        "config",
        new byte[] { 0x0d, 0x31, 0xfa, 0xb4, 0x1b, 0xb7, 0x38, 0x0b, 0x22, 0x4c, 0x2d, 0xfd, 0x25, 0xb1, 0x3e, 0x7e }
      }
    };

    public static Tuple<byte[], byte[]> GetKeysByName(string keyName)
    {
      byte[] key = keys[keyName].Clone() as byte[];
      byte[] iv = ivs[keyName].Clone() as byte[];
      return Tuple.Create(key, iv);
    }

    public static void ApplyMask(Tuple<byte[], byte[]> keys, byte[] mask)
    {
      for (int idx = 0; idx < 16; idx++)
      {
        keys.Item1[idx] ^= mask[idx];
        keys.Item2[idx] ^= mask[idx];
      }
    }

    public static string UnkNetworkSalt = "9eIxwGHYt7X18/t1+FKCyg==";

    public static void ApplyNetworkSalt(string salt, int id, Tuple<byte[], byte[]> keyset)
    {
      MD5 md5 = new MD5CryptoServiceProvider();
      var hash = md5.ComputeHash(Encoding.ASCII.GetBytes($"{salt}{id}"));
      ApplyMask(keyset, hash);
    }

    /// <summary>
    /// Returns the aes key and CTR counter (iv) for the given track id
    /// </summary>
    /// <param name="trackId">The track ID like GHL1000</param>
    /// <returns>Tuple of (key,iv)</returns>
    public static Tuple<byte[], byte[]> GetAudioKeys(string trackId)
    {
      var keys = GetKeysByName("GHL"+GetKeyIndex(trackId));
      ApplyMask(keys, mask);
      return keys;
    }

    public static int GetKeyIndex(string trackId)
    {
      MD5 md5 = new MD5CryptoServiceProvider();
      return md5.ComputeHash(Encoding.ASCII.GetBytes(trackId + "ScoobyDoo"))[15] % 10;
    }

    public static string GetKeyName(string prefix, string trackId)
    {
      return prefix + GetKeyIndex(trackId);
    }
  }
}